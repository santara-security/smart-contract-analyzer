"use strict";(()=>{var e={};e.id=409,e.ids=[409],e.modules={43:(e,t,r)=>{r.d(t,{l:()=>i,t:()=>c});var o=r(9021),s=r.n(o),n=r(3873),a=r.n(n);function i(e,t,r){s().existsSync(e)||s().mkdirSync(e,{recursive:!0});let o=a().join(e,t);s().writeFileSync(o,JSON.stringify(r))}function c(e,t,r=72e5){let o=a().join(e,t);if(s().existsSync(o))try{let e=s().statSync(o),t=Date.now(),n=new Date(e.mtime).getTime();if(t-n<r)return JSON.parse(s().readFileSync(o,"utf8"))}catch(e){}return null}},846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1199:(e,t,r)=>{r.r(t),r.d(t,{patchFetch:()=>l,routeModule:()=>i,serverHooks:()=>p,workAsyncStorage:()=>c,workUnitAsyncStorage:()=>u});var o=r(6559),s=r(8088),n=r(7719),a=r(7961);let i=new o.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/token/route",pathname:"/api/token",filename:"route",bundlePath:"app/api/token/route"},resolvedPagePath:"/mnt/e/javascript/smart-contract-analyzer/src/app/api/token/route.js",nextConfigOutput:"",userland:a}),{workAsyncStorage:c,workUnitAsyncStorage:u,serverHooks:p}=i;function l(){return(0,n.patchFetch)({workAsyncStorage:c,workUnitAsyncStorage:u})}},3033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3873:e=>{e.exports=require("path")},4870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6559:(e,t,r)=>{e.exports=r(4870)},7961:(e,t,r)=>{r.r(t),r.d(t,{GET:()=>p,getTokenWithBlockscout:()=>u});var o=r(2190),s=r(9123),n=r(43);r(9021);let a=r(3873),i=s.B.filter(e=>"base"===e.name),c=e=>{let t={base:"https://base.blockscout.com/api/v2",ethereum:"https://eth.blockscout.com/api/v2",polygon:"https://polygon.blockscout.com/api/v2",arbitrum:"https://arbitrum.blockscout.com/api/v2",optimism:"https://optimism.blockscout.com/api/v2"};return t[e]||t.base},u=async({tokenAddress:e,chain:t,successCallback:r=()=>{},errorCallback:o=()=>{}})=>{let s=a.join(process.cwd(),"results","token"),i=`${e}_${t}`,u=(0,n.t)(s,i,9e5);if(u)return r(u);let p=c(t),l=`${p}/tokens/${e}`;console.log(`Fetching token info from: ${l}`);let d=await fetch(l,{headers:{accept:"application/json"},signal:AbortSignal.timeout(1e4)});if(!d.ok){if(404===d.status)return o(Error("Token not found"));throw Error(`Blockscout API returned ${d.status}: ${d.statusText}`)}return r(await d.json())};async function p(e){let{searchParams:t}=new URL(e.url),r=t.get("tokenAddress"),n=t.get("chain")??i[0]?.name;if(!r)return o.NextResponse.json({error:"tokenAddress is required"},{status:400});if(!s.B.find(e=>e.name===n))return o.NextResponse.json({error:"Invalid chain specified"},{status:400});try{return await u({tokenAddress:r,chain:n,successCallback:e=>o.NextResponse.json(e),errorCallback:e=>o.NextResponse.json({error:`Failed to fetch token information: ${e.message}`},{status:500})})}catch(e){return console.error("Error fetching token info:",e),o.NextResponse.json({error:`Failed to fetch token information: ${e.message}`},{status:500})}}},9021:e=>{e.exports=require("fs")},9294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[447,190,975],()=>r(1199));module.exports=o})();